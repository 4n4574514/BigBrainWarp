function fsaverage2bigbrain(lhData, rhData, outName, bbwDir)
% nearest neighbour interpolation between fsaverage5 and bigbrain
% indexing was pre-generated by Casey, you can find the creation script in "nn_surface_indexing.m" 
%
% input:
% lhData              data on the left hemisphere (1 x 10242)
% rhData              data on the right hemisphere (1 x 10242)
% outName             name of output file (will be apended with "_bigbrain.txt")
% bbwDir              /path/to/BigBrainWarp/
% 
% 
% Compatible data input types include:
% .annot               requires Freesurfer matlab component
% .gifti               requires gifti toolbox (https://www.artefact.tk/software/matlab/gifti/)
% .thickness           requires Freesurfer matlab component
% .curv                requires Freesurfer matlab component 
% .mgh                 requires Freesurfer matlab component 
% .txt
% 
% author: Casey Paquola @ MICA, MNI, 2020*

% convert variables to character vectors
outName = char(outName);
bbwDir = char(bbwDir);
addpath([bbwDir '/scripts/']);

% load and vectorise surface data
[~,~,ext] = fileparts(lhData);
if strcmp(ext, '.annot')
    parc = annot2classes(lhData, rhData, 1);
    lh_input = parc(1:end/2)';
    rh_input = parc((end/2)+1:end)';
elseif strcmp(ext, '.gii')
    tmp = gifti(lhData);
    lh_input = tmp.cdata';
    tmp = gifti(rhData);
    rh_input = tmp.cdata';
elseif strcmp(ext, '.curv')
    lh_input = read_curv(lhData)';
    rh_input = read_curv(rhData)';
elseif strcmp(ext, '.mgh')
    lh_input = load_mgh(char(lhData));
    rh_input = load_mgh(char(rhData));
else
    lh_input = readmatrix(lhData);
    rh_input = readmatrix(rhData);
end

% check size and transpose if necessary
compatSizes = 10242;
if sum(size(lh_input)==size(rh_input))~=2
   error('hemispheric data not the same size');
end
if ~ismember(size(lh_input,2), compatSizes)
    if ismember(size(lh_input,1), compatSizes)
        lh_input = lh_input';
        rh_input = rh_input';
    else
        error('invalid number of vertices');
	disp(["lhData is " size(lh_input)])
	disp(["rhData is " size(rh_input)])
    end
end

% load indexing scheme
load([bbwDir '/scripts/nn_surface_indexing.mat'], 'nn_fs_bb10', 'bb_downsample', 'nn_bb');

% re-index to 10k BigBrain surface
data_fs = [lh_input rh_input];
data_bb10k = data_fs(nn_fs_bb10);

% upsample on bb
data_bb = zeros(1,length(nn_bb));
ubb = unique(bb_downsample);
for ii = 1:length(ubb)
    data_bb(nn_bb==ubb(ii)) = data_bb10k(bb_downsample==ubb(ii));
end

% write out
writematrix(data_bb, [outName '_bigbrain.txt'])
